{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "assetLocation": { "type": "string" },
    "userStorage": { "type": "object" },
    "interactionEventHub": { "type": "object" },
    "observationEventHub": { "type": "object" },
    "joinedEventHub": { "type": "object" },
    "serviceBusName": { "type": "string" },

    "messageRetentionInDays": { "type": "int" },
    "partitionCount": { "type": "int" },

    "experimentalUnitDurationInSeconds": { "type": "int" },

    "streamingUnits": {
      "type": "int",
      "defaultValue": 1
    }
  },
  "variables": {
    "experimentalUnitDurationPlusTimeoutInMicrosecond": "[string(mul(1000000, add(600, parameters('experimentalUnitDurationInSeconds'))))]",
    "joinQuery": "WITH Joined AS ( \n   SELECT\n    -- Vowpal Wabbit JSON ignores _ prefixed variables \n    interaction.EventId _EventId, \n    interaction.PartitionId _PartitionId, \n    interaction.EventEnqueuedUtcTime _Timestamp, \n    -- Action\n    CASE\n     WHEN TRY_CAST(interaction.a as array) IS NULL THEN interaction.a -- policy\n     ELSE GetArrayElement(interaction.a, 0) -- ranking\n    END _label_Action,\n    -- Cost\n    CASE  \n     WHEN observation IS NULL THEN 1 -- default cost\n     ELSE -observation.v -- insert custom reward function using ASA SQL, JavaScript or AzureML\n    END _label_Cost,\n    -- Probability   \n    CASE\n     WHEN interaction.ProbabilityOfDrop IS NULL THEN GetArrayElement(interaction.p, 0) -- take care of queue overload\n     ELSE GetArrayElement(interaction.p, 0) * (1 - interaction.ProbabilityOfDrop)\n    END _label_Probability,\n    CASE\n     WHEN TRY_CAST(interaction.a as array) IS NULL THEN null\n     ELSE GetArrayElement(interaction.a, 0) - 1\n    END _labelIndex,\n    interaction.c.*\n   FROM interaction TIMESTAMP BY EventEnqueuedUtcTime PARTITION BY PartitionId\n   -- always output interaction events, regardless if there is an observation or not\n   LEFT OUTER JOIN\n   -- shift observation time line before interaction (thus interaction comes later)\n   -- the output event timestamp is defined as the maximum of (interaction event, observation event) --> always interaction event timestamp\n    observation TIMESTAMP BY DATEADD(Microsecond, -$ExperimentalDurationInMicrosecond$, EventEnqueuedUtcTime) PARTITION BY PartitionId\n   -- MUST use Microsecond due to rounding issue in DATEDIFF, otherwise observation events are moved forward by 1 time unit\n   -- Allow for early observation events up to 10 minutes\n        ON DATEDIFF(Microsecond, observation, interaction) BETWEEN 0 AND $ExperimentalDurationPlusTimeoutInMicrosecond$ \n        AND interaction.EventId = observation.EventId\n        AND interaction.PartitionId = observation.PartitionId\n)\n \nSELECT * INTO outHubStream FROM Joined PARTITION BY _PartitionId \nSELECT * INTO outBlob FROM Joined PARTITION BY _PartitionId "
  },
  "resources": [
    {
      "apiVersion": "2015-10-01",
      "type": "Microsoft.StreamAnalytics/streamingjobs",
      "name": "[concat(resourceGroup().name, '-join')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "name": "standard"
        },
        "OutputStartMode": "JobStartTime",
        "EventsOutOfOrderMaxDelayInSeconds": 0,
        "EventsLateArrivalMaxDelayInSeconds": 5,
        "EventsOutOfOrderPolicy": "adjust",
        "Inputs": [
          {
            "Name": "interaction",
            "Properties": {
              "DataSource": {
                "Properties": {
                  "ServiceBusNamespace": "[parameters('serviceBusName')]",
                  "eventHubName": "interaction",
                  "sharedAccessPolicyName": "ListenOnly",
                  "sharedAccessPolicyKey": "[parameters('interactionEventHub').ListenKey.value]"
                },
                "Type": "Microsoft.ServiceBus/EventHub"
              },
              "Serialization": {
                "Properties": {
                  "Encoding": "UTF8"
                },
                "Type": "Json"
              },
              "Type": "Stream"
            }
          },
          {
            "Name": "observation",
            "Properties": {
              "DataSource": {
                "Properties": {
                  "ServiceBusNamespace": "[parameters('serviceBusName')]",
                  "eventHubName": "observation",
                  "sharedAccessPolicyName": "ListenOnly",
                  "sharedAccessPolicyKey": "[parameters('observationEventHub').ListenKey.value]"
                },
                "Type": "Microsoft.ServiceBus/EventHub"
              },
              "Serialization": {
                "Properties": {
                  "Encoding": "UTF8"
                },
                "Type": "Json"
              },
              "Type": "Stream"
            }
          }
        ],
        "Outputs": [
          {
            "Name": "outHubStream",
            "Properties": {
              "DataSource": {
                "Properties": {
                  "ServiceBusNamespace": "[parameters('serviceBusName')]",
                  "eventHubName": "joined",
                  "sharedAccessPolicyName": "SendOnly",
                  "sharedAccessPolicyKey": "[parameters('joinedEventHub').SendKey.value]"
                },
                "Type": "Microsoft.ServiceBus/EventHub"
              },
              "Serialization": {
                "Properties": {
                  "Encoding": "UTF8"
                },
                "Type": "Json"
              },
              "Type": "Stream"
            }
          },
          {
            "Name": "outBlob",
            "Properties": {
              "DataSource": {
                "Properties": {
                  "Container": "joined-examples",
                  "DateFormat": "yyyy/MM/dd",
                  "TimeFormat": "HH",
                  "PathPattern": "{date}/{time}",
                  "StorageAccounts": [
                    {
                      "AccountName": "[parameters('userStorage').userStorageAccountName.value]",
                      "AccountKey": "[parameters('userStorage').userStorageAccountKey.value]"
                    }
                  ]
                },
                "Type": "Microsoft.Storage/Blob"
              },
              "Serialization": {
                "Properties": {
                  "Encoding": "UTF8"
                },
                "Type": "Json"
              }
            }
          }
        ],
        "Transformation": {
          "Name": "theJoinQuery",
          "Properties": {
            "Query": "[replace(replace(variables('joinQuery'),'$ExperimentalDurationInMicrosecond$', string(mul(parameters('experimentalUnitDurationInSeconds'), 1000000))), '$ExperimentalDurationPlusTimeoutInMicrosecond$', variables('experimentalUnitDurationPlusTimeoutInMicrosecond'))]",
            "StreamingUnits": "[parameters('streamingUnits')]"
          }
        }
      }
    }
  ]
}
